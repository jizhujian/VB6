<?xml version="1.0"?>
<doc>
<assembly>
<name>
dotNET2COM
</name>
</assembly>
<members>
<member name="T:dotNET2COM.Cryptography">
 <summary>
 加密函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.Cryptography.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.ComputeByteArrayHash(System.Byte[]@)">
 <summary>
 计算字节数组的MD5哈希值
 </summary>
 <param name="Value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.ComputeStringHash(System.String,dotNET2COM.File.TextEncoding)">
 <summary>
 计算字符串的MD5哈希值
 </summary>
 <param name="Value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.Encrypt(System.String,System.String,System.String,dotNET2COM.File.TextEncoding,dotNET2COM.File.TextEncoding,dotNET2COM.File.TextEncoding)">
 <summary>
 加密字符串
 </summary>
 <param name="Value"></param>
 <param name="Key"></param>
 <param name="IV"></param>
 <param name="ValueTextEncoding"></param>
 <param name="KeyTextEncoding"></param>
 <param name="IVTextEncoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.Decrypt(System.String@,System.String,System.String,dotNET2COM.File.TextEncoding,dotNET2COM.File.TextEncoding,dotNET2COM.File.TextEncoding)">
 <summary>
 解密字符串
 </summary>
 <param name="Value"></param>
 <param name="Key"></param>
 <param name="IV"></param>
 <param name="ValueTextEncoding"></param>
 <param name="KeyTextEncoding"></param>
 <param name="IVTextEncoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.CreatePrivateKey">
 <summary>
 创建私钥
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.GetPublicKey(System.String)">
 <summary>
 提取公钥
 </summary>
 <param name="privateKey"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.CreateSignature(System.String,System.String)">
 <summary>
 创建数字签名
 </summary>
 <param name="privateKey">私钥</param>
 <param name="value">需要签名的内容</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Cryptography.VerifySignature(System.String,System.String,System.String)">
 <summary>
 校验数字签名
 </summary>
 <param name="publicKey">公钥</param>
 <param name="value">签名的内容</param>
 <param name="signature">数字签名</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.Date">
 <summary>
 日期函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.Date.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Date.IsDate(System.String)">
 <summary>
 是否表示一个有效的日期值
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Date.CDateA(System.String)">
 <summary>
 将字符串转换成日期值
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.MailSender">
 <summary>
 发送邮件
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.MailSender.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.Address">
 <summary>
 Email地址
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.DisplayName">
 <summary>
 显示名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.Host">
 <summary>
 SMTP发送服务器
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.Port">
 <summary>
 SMTP发送服务器端口号，默认25
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.UserName">
 <summary>
 帐号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.MailSender.Password">
 <summary>
 密码
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.MailSender.SendMail(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 发送邮件
 </summary>
 <param name="toList">收件人，多个收件人用分号间隔</param>
 <param name="ccList">抄送，多个抄送用分号间隔</param>
 <param name="bccList">密送，多个密送用分号间隔</param>
 <param name="title">主题</param>
 <param name="content">正文</param>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.File">
 <summary>
 文件操作函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.File.TextEncoding">
 <summary>
 字符编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.Default">
 <summary>
 操作系统的当前 ANSI 代码页的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.Unicode">
 <summary>
 Little-Endian 字节顺序的 UTF-16 格式的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.ASCII">
 <summary>
 ASCII（7 位）字符集的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.UTF8">
 <summary>
 UTF-8 格式的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.UTF7">
 <summary>
 UTF-7 格式的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.UTF32">
 <summary>
 Little-Endian 字节顺序的 UTF-32 格式的编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.File.TextEncoding.BigEndianUnicode">
 <summary>
 Big-Endian 字节顺序的 UTF-16 格式的编码
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetTextEncoding(dotNET2COM.File.TextEncoding)">
 <summary>
 将COM字符编码类型转换NET字符编码类型
 </summary>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetTempPath">
 <summary>
 返回当前系统的临时文件夹的路径
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetTempFileName">
 <summary>
 创建磁盘上唯一命名的零字节的临时文件并返回该文件的完整路径
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.ReadAllBytes(System.String)">
 <summary>
 打开一个文件，将文件的内容读入一个字节数组，然后关闭该文件
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.ReadAllLines(System.String,dotNET2COM.File.TextEncoding)">
 <summary>
 打开一个文件，使用指定的编码，读取文件的所有行到字符串数组，然后关闭该文件
 </summary>
 <param name="path"></param>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.ReadAllText(System.String,dotNET2COM.File.TextEncoding)">
 <summary>
 打开一个文件，使用指定的编码，读取文件的所有行到字符串，然后关闭该文件
 </summary>
 <param name="path"></param>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.WriteAllBytes(System.String,System.Byte[]@)">
 <summary>
 创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。如果目标文件已存在，则覆盖该文件
 </summary>
 <param name="path"></param>
 <param name="bytes"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.WriteAllLines(System.String,System.String[]@,dotNET2COM.File.TextEncoding)">
 <summary>
 创建一个新文件，使用指定的编码在其中写入指定的字符串数组，然后关闭该文件
 </summary>
 <param name="path"></param>
 <param name="contents"></param>
 <param name="encoding"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.WriteAllText(System.String,System.String,dotNET2COM.File.TextEncoding)">
 <summary>
 创建一个新文件，使用指定的编码在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件
 </summary>
 <param name="path"></param>
 <param name="contents"></param>
 <param name="encoding"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.AppendAllText(System.String,System.String,dotNET2COM.File.TextEncoding)">
 <summary>
 使用指定的编码将指定的字符串追加到文件中，如果文件还不存在则创建该文件
 </summary>
 <param name="path"></param>
 <param name="contents"></param>
 <param name="encoding"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.AppendAllLines(System.String,System.String[]@,dotNET2COM.File.TextEncoding)">
 <summary>
 使用指定的编码向一个文件中追加文本行，然后关闭该文件。
 </summary>
 <param name="path"></param>
 <param name="contents"></param>
 <param name="encoding"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.ExistsFile(System.String)">
 <summary>
 确定指定的文件是否存在
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.DeleteFile(System.String)">
 <summary>
 删除指定的文件。如果指定的文件不存在，则不引发异常
 </summary>
 <param name="path"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetDirectoryName(System.String)">
 <summary>
 返回指定路径字符串的目录信息
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetFileName(System.String)">
 <summary>
 返回指定路径字符串的文件名和扩展名
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetValidatedFileName(System.String)">
 <summary>
 去除文件名中无效字符
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetFileNameWithoutExtension(System.String)">
 <summary>
 返回不具有扩展名的指定路径字符串的文件名
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.HasExtension(System.String)">
 <summary>
 确定路径是否包括文件扩展名
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.GetExtension(System.String)">
 <summary>
 返回指定的路径字符串的扩展名
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.File.ChangeExtension(System.String,System.String)">
 <summary>
 更改路径字符串的扩展名
 </summary>
 <param name="path"></param>
 <param name="extension">新的扩展名（有或没有前导句点）。指定 null 以从 path 移除现有扩展名</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.IdentityCard">
 <summary>
 居民身份证号码函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.IdentityCard.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.IdentityCard.GenderEnum">
 <summary>
 性别类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.IdentityCard.GenderEnum.Women">
 <summary>
 女
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.IdentityCard.GenderEnum.Men">
 <summary>
 男
 </summary>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.IdentityCard.Coding">
 <summary>
 居民身份证号码
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.IdentityCard.Birthday">
 <summary>
 出生日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.IdentityCard.Gender">
 <summary>
 性别
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.IdentityCard.CalculateParityBit(System.String)">
 <summary>
 计算居民身份证最后一位校验码
 </summary>
 <param name="coding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.Lunar">
 <summary>
 农历函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.Lunar.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.SolarDate">
 <summary>
 公历日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarYear">
 <summary>
 农历年
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarYearName">
 <summary>
 农历年中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.IsLeapMonth">
 <summary>
 是否闰月
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.IsLeapMonthName">
 <summary>
 是否闰月中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarMonth">
 <summary>
 农历月
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarMonthName">
 <summary>
 农历月中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarDay">
 <summary>
 农历日
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.LunarDayName">
 <summary>
 农历日中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.HeavenlyStemName">
 <summary>
 天干
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.EarthlyBranchName">
 <summary>
 地支
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.TwelveAnimalName">
 <summary>
 属相(生肖)中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.SolarTermName">
 <summary>
 节气中文名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Lunar.SolarTermDate">
 <summary>
 节气日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.CalculateLunar">
 <summary>
 计算农历
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.CalculateLunarDay">
 <summary>
 计算农历日
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.CalculateLunarMonth">
 <summary>
 计算农历月
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.CalculateLunarYear">
 <summary>
 计算农历年
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.CalculateSolarTerm">
 <summary>
 计算节气
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.Tail(System.Double)">
 <summary>
 返回小数部分
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.Round(System.Double)">
 <summary>
 四舍五入
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.Ang(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
 <summary>
 角度函数
 </summary>
 <param name="x"></param>
 <param name="t"></param>
 <param name="c1"></param>
 <param name="t0"></param>
 <param name="t2"></param>
 <param name="t3"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.Date2SpanDays(System.DateTime)">
 <summary>
 从1年1月1日起经过的天数
 </summary>
 <param name="solarDate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.SpanDays2Date(System.Double)">
 <summary>
 从1年1月1日起经过指定天数的日期
 </summary>
 <param name="days"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.Date2SpanDaysInYear(System.DateTime)">
 <summary>
 从本年1月1日起经过的天数
 </summary>
 <param name="solarDate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Lunar.SpanDays2DateInYear(System.Int32,System.Double)">
 <summary>
 从本年经过指定天数的日期
 </summary>
 <param name="solarYear"></param>
 <param name="days"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.Math">
 <summary>
 数学函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.Math.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Dec2NBase(System.Int32,System.Byte)">
 <summary>
 十进制转任意进制
 </summary>
 <param name="decValue"></param>
 <param name="nBase"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.NBase2Dec(System.String,System.Byte)">
 <summary>
 任意进制转十进制
 </summary>
 <param name="nBaseValue"></param>
 <param name="nBase"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Eval(System.String)">
 <summary>
 计算数值表达式值
 </summary>
 <param name="expression"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Truncate(System.Double)">
 <summary>
 返回小数的整数部分
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Round(System.Double,System.Int32)">
 <summary>
 当一个数字是其他两个数字的中间值时，会将其舍入为两个值中绝对值较小的值
 </summary>
 <param name="value"></param>
 <param name="decimals"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Floor(System.Double,System.Int32)">
 <summary>
 返回小于等于值的最大数
 </summary>
 <param name="value"></param>
 <param name="decimals"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Math.Ceiling(System.Double,System.Int32)">
 <summary>
 返回大于等于值的最小数
 </summary>
 <param name="value"></param>
 <param name="decimals"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.NetworkInterface">
 <summary>
 网卡函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.NetworkInterface.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.NetworkInterface.GetEthernetMACAddresses">
 <summary>
 获取网卡MAC地址
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.Regex">
 <summary>
 正则表达式函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.Regex.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Regex.Pattern">
 <summary>
 要匹配的正则表达式模式
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:dotNET2COM.Regex.IgnoreCase">
 <summary>
 指定不区分大小写的匹配
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Regex.Matches(System.String)">
 <summary>
 使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Regex.ParseNameValues(System.String)">
 <summary>
 使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项，返回正则表达式中的命名值对
 正则表达式必须包含&lt;name[0-99]&gt;&lt;value[0-99]&gt;
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.Regex.Replace(System.String,System.String)">
 <summary>
 在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。指定的选项将修改匹配操作
 </summary>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.SerialPort">
 <summary>
 串行端口函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.SerialPort.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.SerialPort.GetSerialPortNames">
 <summary>
 获取当前计算机的串行端口名称数组
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.String">
 <summary>
 字符串函数库
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.String.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.BytesToBase64String(System.Byte[]@)">
 <summary>
 将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式
 </summary>
 <param name="Value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.Base64StringToBytes(System.String)">
 <summary>
 将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组
 </summary>
 <param name="Value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.NewGuid">
 <summary>
 返回全局唯一标识符 (GUID)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.DBC2SBC(System.String)">
 <summary>
 将双字节（全角）字符串转换成单字节（半角）字符串
 </summary>
 <param name="dbcString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.SBC2DBC(System.String)">
 <summary>
 将单字节（半角）字符串转换成双字节（全角）字符串
 </summary>
 <param name="sbcString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.FormatNumber(System.Double,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 格式化显示数值
 </summary>
 <param name="value"></param>
 <param name="numDigitsAfterDecimal">小数位数</param>
 <param name="includeLeadingDigit">小数点前显示前导零</param>
 <param name="useParensForNegativeNumbers">负数用括号</param>
 <param name="groupDigits">显示千分位分隔符</param>
 <param name="fixedDigitsAfterDecimal">小数点后显示固定位数</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.UrlEncode(System.String)">
 <summary>
 对 URL 字符串进行编码
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.UrlDecode(System.String)">
 <summary>
 将已经为在 URL 中传输而编码的字符串转换为解码的字符串。
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.HtmlEncode(System.String)">
 <summary>
 将字符串转换为 HTML 编码的字符串。
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.String.HtmlDecode(System.String)">
 <summary>
 将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:dotNET2COM.StringBuilder">
 <summary>
 可变字符字符串
 </summary>
 <remarks></remarks>
</member>
<member name="F:dotNET2COM.StringBuilder.ClassId">
 <summary>
 COM注册必须
 </summary>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.StringBuilder.Append(System.String)">
 <summary>
 在此实例的结尾追加指定字符串的副本。
 </summary>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.StringBuilder.AppendLine(System.String)">
 <summary>
 将后面跟有默认行终止符的指定字符串的副本追加到当前 StringBuilder 对象的末尾。
 </summary>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.StringBuilder.ToString">
 <summary>
 将此实例的值转换为 String
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:dotNET2COM.StringBuilder.Clear">
 <summary>
 从当前 StringBuilder 实例中移除所有字符。
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
